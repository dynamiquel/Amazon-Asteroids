[Add your work here and the estimate amount of time spent(remember that there is no hard time limit)]
Time spent:

Day 1
1. Changed the SDL_Renderer from SDL_RENDERER_SOFTWARE to SDL_RENDERER_ACCELERATED.
2. Changed SDL_Delay from 1 to 1000 / 200 (~200 fps) to make tick-based executions more consistent. 
   I chose 200 fps as most computers should be able to handle it and it makes the game feel smooth on higher refresh rate monitors.
3. Created a class called Textures, which contains a map of SDL_Textures.
4. Added a method to replace Drawer.DrawImage() called Drawer.DrawImageCached().
   Instead of destroying the newly created texture after use, it is added to the Textures object for caching purposes.
   If Textures contains a key for the desired image, then that texture will be used instead of creating a new one.
   This removes the memory leak and decreases CPU usage from ~14% to ~0.2%.
5. Added more user input options, such as WASD and key pad as users will have preferences.
6. Added a delay to firing using delta time. Delta time should make the firing delay not frame-rate dependent.
7. Split up the Main class from one method to OnStart(), OnUpdate(), OnEnd(), OnExit() to simplify the execution process.
8. Added the ability to exit the app using the Close button.
9. Created an Object class to replace Position in Asteroids.
   It contains basic info for in-game objects, such as position, size and rotation. It will also contain methods.
10. Changed the way an Object's Position is represented.
   Object.rect.position now represents the centre of the Object; not the top-left.
   The Rect.Left(), Rect.Top(), Rect.Right() and Rect.Bottom() methods can be used to get edges.
   The Object contructor has a boolean value, which determines whether the given position should be treated as a top-left or centre position.
   It's automatically set to true as most positions will likely already be centred.
   The entire Rect area represents the collider of the Object; not the texture. The size of the texture will be the size of the image file it came from.
   This is useful as the texture may have extra padding, which would be unideal for a collider as it would be difficult for users to see
   where colliders are, namely asteroid.png.
11. Replaced the existing collision detection with Object.IsColliding(Object&).
   This method returns true if the two Rects in the Objects are overlapping.
12. Increased window size to 1280x1024 (bg.png resolution).
====== 6 hours ======
Day 2
13. Added enemies.
14. Shots that collide with asteroids and enemies are destroyed.
15. When the player collides with an asteroid or enemy, they lose a life and are set back to spawn position.
16. The player can no longer leave the window boundaries.
====== 2 hours ======
Day 3
17. Added Thrust. Because physics, thrust only applies to forward movement. The amount of thrust is based on seconds using Asteroids.thurstTime.
    When some thrust is deplated, a countdown starts and when it finishes, the thrust slowly replenishes.
    If thrust is used whiles it is replenishing, replenishing stops and the countdown starts again.
18. Added mouse input for firing.
19. Added a slight hover effect to the ship. This should make the game feel more alive.
20. Fixed the memory leak and high CPU usage with drawing text by caching the font textures in Textures.
21. The player's lives are displayed underneath the score.
22. Score is gained when destroying enemies and asteroids. Asteroids = 1, Enemies = 2.